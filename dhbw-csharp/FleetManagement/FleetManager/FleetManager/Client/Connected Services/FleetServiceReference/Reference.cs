//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.FleetServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Server.Models")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Firstname {
            get {
                return this.FirstnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstnameField, value) != true)) {
                    this.FirstnameField = value;
                    this.RaisePropertyChanged("Firstname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lastname {
            get {
                return this.LastnameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastnameField, value) != true)) {
                    this.LastnameField = value;
                    this.RaisePropertyChanged("Lastname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BusinessUnit", Namespace="http://schemas.datacontract.org/2004/07/Server.Models")]
    [System.SerializableAttribute()]
    public partial class BusinessUnit : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/Server.Models")]
    [System.SerializableAttribute()]
    public partial class Employee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.FleetServiceReference.BusinessUnit BusinessUnitIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmployeeNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SalutationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.FleetServiceReference.BusinessUnit BusinessUnitId {
            get {
                return this.BusinessUnitIdField;
            }
            set {
                if ((object.ReferenceEquals(this.BusinessUnitIdField, value) != true)) {
                    this.BusinessUnitIdField = value;
                    this.RaisePropertyChanged("BusinessUnitId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmployeeNumber {
            get {
                return this.EmployeeNumberField;
            }
            set {
                if ((this.EmployeeNumberField.Equals(value) != true)) {
                    this.EmployeeNumberField = value;
                    this.RaisePropertyChanged("EmployeeNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Salutation {
            get {
                return this.SalutationField;
            }
            set {
                if ((object.ReferenceEquals(this.SalutationField, value) != true)) {
                    this.SalutationField = value;
                    this.RaisePropertyChanged("Salutation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vehicle", Namespace="http://schemas.datacontract.org/2004/07/Server.Models")]
    [System.SerializableAttribute()]
    public partial class Vehicle : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BrandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal InsuranceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LeasingFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LeasingRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LeasingToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LicensePlateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Brand {
            get {
                return this.BrandField;
            }
            set {
                if ((object.ReferenceEquals(this.BrandField, value) != true)) {
                    this.BrandField = value;
                    this.RaisePropertyChanged("Brand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Insurance {
            get {
                return this.InsuranceField;
            }
            set {
                if ((this.InsuranceField.Equals(value) != true)) {
                    this.InsuranceField = value;
                    this.RaisePropertyChanged("Insurance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LeasingFrom {
            get {
                return this.LeasingFromField;
            }
            set {
                if ((this.LeasingFromField.Equals(value) != true)) {
                    this.LeasingFromField = value;
                    this.RaisePropertyChanged("LeasingFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LeasingRate {
            get {
                return this.LeasingRateField;
            }
            set {
                if ((this.LeasingRateField.Equals(value) != true)) {
                    this.LeasingRateField = value;
                    this.RaisePropertyChanged("LeasingRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LeasingTo {
            get {
                return this.LeasingToField;
            }
            set {
                if ((this.LeasingToField.Equals(value) != true)) {
                    this.LeasingToField = value;
                    this.RaisePropertyChanged("LeasingTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LicensePlate {
            get {
                return this.LicensePlateField;
            }
            set {
                if ((object.ReferenceEquals(this.LicensePlateField, value) != true)) {
                    this.LicensePlateField = value;
                    this.RaisePropertyChanged("LicensePlate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VehicleToEmployeeRelation", Namespace="http://schemas.datacontract.org/2004/07/Server.Models")]
    [System.SerializableAttribute()]
    public partial class VehicleToEmployeeRelation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.FleetServiceReference.Employee EmployeeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.FleetServiceReference.Vehicle VehicleIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.FleetServiceReference.Employee EmployeeId {
            get {
                return this.EmployeeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeeIdField, value) != true)) {
                    this.EmployeeIdField = value;
                    this.RaisePropertyChanged("EmployeeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.FleetServiceReference.Vehicle VehicleId {
            get {
                return this.VehicleIdField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleIdField, value) != true)) {
                    this.VehicleIdField = value;
                    this.RaisePropertyChanged("VehicleId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FleetServiceReference.IFleetService")]
    public interface IFleetService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/CanUserLogin", ReplyAction="http://tempuri.org/IFleetService/CanUserLoginResponse")]
        Client.FleetServiceReference.User CanUserLogin(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/CanUserLogin", ReplyAction="http://tempuri.org/IFleetService/CanUserLoginResponse")]
        System.Threading.Tasks.Task<Client.FleetServiceReference.User> CanUserLoginAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangePassword", ReplyAction="http://tempuri.org/IFleetService/ChangePasswordResponse")]
        bool ChangePassword(string username, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangePassword", ReplyAction="http://tempuri.org/IFleetService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(string username, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/getAllUsers", ReplyAction="http://tempuri.org/IFleetService/getAllUsersResponse")]
        Client.FleetServiceReference.User[] getAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/getAllUsers", ReplyAction="http://tempuri.org/IFleetService/getAllUsersResponse")]
        System.Threading.Tasks.Task<Client.FleetServiceReference.User[]> getAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetAllBusinessUnits", ReplyAction="http://tempuri.org/IFleetService/GetAllBusinessUnitsResponse")]
        Client.FleetServiceReference.BusinessUnit[] GetAllBusinessUnits();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetAllBusinessUnits", ReplyAction="http://tempuri.org/IFleetService/GetAllBusinessUnitsResponse")]
        System.Threading.Tasks.Task<Client.FleetServiceReference.BusinessUnit[]> GetAllBusinessUnitsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddUser", ReplyAction="http://tempuri.org/IFleetService/AddUserResponse")]
        bool AddUser(Client.FleetServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddUser", ReplyAction="http://tempuri.org/IFleetService/AddUserResponse")]
        System.Threading.Tasks.Task<bool> AddUserAsync(Client.FleetServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteUser", ReplyAction="http://tempuri.org/IFleetService/DeleteUserResponse")]
        bool DeleteUser(Client.FleetServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteUser", ReplyAction="http://tempuri.org/IFleetService/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(Client.FleetServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangeUser", ReplyAction="http://tempuri.org/IFleetService/ChangeUserResponse")]
        bool ChangeUser(Client.FleetServiceReference.User oldUser, Client.FleetServiceReference.User newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangeUser", ReplyAction="http://tempuri.org/IFleetService/ChangeUserResponse")]
        System.Threading.Tasks.Task<bool> ChangeUserAsync(Client.FleetServiceReference.User oldUser, Client.FleetServiceReference.User newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddBusinessUnit", ReplyAction="http://tempuri.org/IFleetService/AddBusinessUnitResponse")]
        bool AddBusinessUnit(Client.FleetServiceReference.BusinessUnit businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddBusinessUnit", ReplyAction="http://tempuri.org/IFleetService/AddBusinessUnitResponse")]
        System.Threading.Tasks.Task<bool> AddBusinessUnitAsync(Client.FleetServiceReference.BusinessUnit businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteBusinessUnit", ReplyAction="http://tempuri.org/IFleetService/DeleteBusinessUnitResponse")]
        bool DeleteBusinessUnit(Client.FleetServiceReference.BusinessUnit businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteBusinessUnit", ReplyAction="http://tempuri.org/IFleetService/DeleteBusinessUnitResponse")]
        System.Threading.Tasks.Task<bool> DeleteBusinessUnitAsync(Client.FleetServiceReference.BusinessUnit businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangeBusinessUnit", ReplyAction="http://tempuri.org/IFleetService/ChangeBusinessUnitResponse")]
        bool ChangeBusinessUnit(Client.FleetServiceReference.BusinessUnit oldBusinessUnit, Client.FleetServiceReference.BusinessUnit newBusinessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangeBusinessUnit", ReplyAction="http://tempuri.org/IFleetService/ChangeBusinessUnitResponse")]
        System.Threading.Tasks.Task<bool> ChangeBusinessUnitAsync(Client.FleetServiceReference.BusinessUnit oldBusinessUnit, Client.FleetServiceReference.BusinessUnit newBusinessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetAllEmployees", ReplyAction="http://tempuri.org/IFleetService/GetAllEmployeesResponse")]
        Client.FleetServiceReference.Employee[] GetAllEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetAllEmployees", ReplyAction="http://tempuri.org/IFleetService/GetAllEmployeesResponse")]
        System.Threading.Tasks.Task<Client.FleetServiceReference.Employee[]> GetAllEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddEmployee", ReplyAction="http://tempuri.org/IFleetService/AddEmployeeResponse")]
        bool AddEmployee(Client.FleetServiceReference.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddEmployee", ReplyAction="http://tempuri.org/IFleetService/AddEmployeeResponse")]
        System.Threading.Tasks.Task<bool> AddEmployeeAsync(Client.FleetServiceReference.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteEmployee", ReplyAction="http://tempuri.org/IFleetService/DeleteEmployeeResponse")]
        bool DeleteEmployee(Client.FleetServiceReference.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteEmployee", ReplyAction="http://tempuri.org/IFleetService/DeleteEmployeeResponse")]
        System.Threading.Tasks.Task<bool> DeleteEmployeeAsync(Client.FleetServiceReference.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangeEmployee", ReplyAction="http://tempuri.org/IFleetService/ChangeEmployeeResponse")]
        bool ChangeEmployee(Client.FleetServiceReference.Employee oldEmployee, Client.FleetServiceReference.Employee newEmployee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangeEmployee", ReplyAction="http://tempuri.org/IFleetService/ChangeEmployeeResponse")]
        System.Threading.Tasks.Task<bool> ChangeEmployeeAsync(Client.FleetServiceReference.Employee oldEmployee, Client.FleetServiceReference.Employee newEmployee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/CanRemoveEmployee", ReplyAction="http://tempuri.org/IFleetService/CanRemoveEmployeeResponse")]
        bool CanRemoveEmployee(Client.FleetServiceReference.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/CanRemoveEmployee", ReplyAction="http://tempuri.org/IFleetService/CanRemoveEmployeeResponse")]
        System.Threading.Tasks.Task<bool> CanRemoveEmployeeAsync(Client.FleetServiceReference.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetEmployeeById", ReplyAction="http://tempuri.org/IFleetService/GetEmployeeByIdResponse")]
        Client.FleetServiceReference.Employee GetEmployeeById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetEmployeeById", ReplyAction="http://tempuri.org/IFleetService/GetEmployeeByIdResponse")]
        System.Threading.Tasks.Task<Client.FleetServiceReference.Employee> GetEmployeeByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetAllVehicles", ReplyAction="http://tempuri.org/IFleetService/GetAllVehiclesResponse")]
        Client.FleetServiceReference.Vehicle[] GetAllVehicles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetAllVehicles", ReplyAction="http://tempuri.org/IFleetService/GetAllVehiclesResponse")]
        System.Threading.Tasks.Task<Client.FleetServiceReference.Vehicle[]> GetAllVehiclesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddVehicle", ReplyAction="http://tempuri.org/IFleetService/AddVehicleResponse")]
        bool AddVehicle(Client.FleetServiceReference.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddVehicle", ReplyAction="http://tempuri.org/IFleetService/AddVehicleResponse")]
        System.Threading.Tasks.Task<bool> AddVehicleAsync(Client.FleetServiceReference.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteVehicle", ReplyAction="http://tempuri.org/IFleetService/DeleteVehicleResponse")]
        bool DeleteVehicle(Client.FleetServiceReference.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteVehicle", ReplyAction="http://tempuri.org/IFleetService/DeleteVehicleResponse")]
        System.Threading.Tasks.Task<bool> DeleteVehicleAsync(Client.FleetServiceReference.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangeVehicle", ReplyAction="http://tempuri.org/IFleetService/ChangeVehicleResponse")]
        bool ChangeVehicle(Client.FleetServiceReference.Vehicle oldVehicle, Client.FleetServiceReference.Vehicle newVehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangeVehicle", ReplyAction="http://tempuri.org/IFleetService/ChangeVehicleResponse")]
        System.Threading.Tasks.Task<bool> ChangeVehicleAsync(Client.FleetServiceReference.Vehicle oldVehicle, Client.FleetServiceReference.Vehicle newVehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetRelationFromVehicle", ReplyAction="http://tempuri.org/IFleetService/GetRelationFromVehicleResponse")]
        Client.FleetServiceReference.VehicleToEmployeeRelation[] GetRelationFromVehicle(Client.FleetServiceReference.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetRelationFromVehicle", ReplyAction="http://tempuri.org/IFleetService/GetRelationFromVehicleResponse")]
        System.Threading.Tasks.Task<Client.FleetServiceReference.VehicleToEmployeeRelation[]> GetRelationFromVehicleAsync(Client.FleetServiceReference.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddVehicleToEmployeeRelation", ReplyAction="http://tempuri.org/IFleetService/AddVehicleToEmployeeRelationResponse")]
        bool AddVehicleToEmployeeRelation(Client.FleetServiceReference.VehicleToEmployeeRelation relation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddVehicleToEmployeeRelation", ReplyAction="http://tempuri.org/IFleetService/AddVehicleToEmployeeRelationResponse")]
        System.Threading.Tasks.Task<bool> AddVehicleToEmployeeRelationAsync(Client.FleetServiceReference.VehicleToEmployeeRelation relation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteVehicleToEmployeeRelation", ReplyAction="http://tempuri.org/IFleetService/DeleteVehicleToEmployeeRelationResponse")]
        bool DeleteVehicleToEmployeeRelation(Client.FleetServiceReference.VehicleToEmployeeRelation relation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteVehicleToEmployeeRelation", ReplyAction="http://tempuri.org/IFleetService/DeleteVehicleToEmployeeRelationResponse")]
        System.Threading.Tasks.Task<bool> DeleteVehicleToEmployeeRelationAsync(Client.FleetServiceReference.VehicleToEmployeeRelation relation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetAllRelations", ReplyAction="http://tempuri.org/IFleetService/GetAllRelationsResponse")]
        Client.FleetServiceReference.VehicleToEmployeeRelation[] GetAllRelations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetAllRelations", ReplyAction="http://tempuri.org/IFleetService/GetAllRelationsResponse")]
        System.Threading.Tasks.Task<Client.FleetServiceReference.VehicleToEmployeeRelation[]> GetAllRelationsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFleetServiceChannel : Client.FleetServiceReference.IFleetService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FleetServiceClient : System.ServiceModel.ClientBase<Client.FleetServiceReference.IFleetService>, Client.FleetServiceReference.IFleetService {
        
        public FleetServiceClient() {
        }
        
        public FleetServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FleetServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FleetServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FleetServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.FleetServiceReference.User CanUserLogin(string userName, string password) {
            return base.Channel.CanUserLogin(userName, password);
        }
        
        public System.Threading.Tasks.Task<Client.FleetServiceReference.User> CanUserLoginAsync(string userName, string password) {
            return base.Channel.CanUserLoginAsync(userName, password);
        }
        
        public bool ChangePassword(string username, string oldPassword, string newPassword) {
            return base.Channel.ChangePassword(username, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(string username, string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordAsync(username, oldPassword, newPassword);
        }
        
        public Client.FleetServiceReference.User[] getAllUsers() {
            return base.Channel.getAllUsers();
        }
        
        public System.Threading.Tasks.Task<Client.FleetServiceReference.User[]> getAllUsersAsync() {
            return base.Channel.getAllUsersAsync();
        }
        
        public Client.FleetServiceReference.BusinessUnit[] GetAllBusinessUnits() {
            return base.Channel.GetAllBusinessUnits();
        }
        
        public System.Threading.Tasks.Task<Client.FleetServiceReference.BusinessUnit[]> GetAllBusinessUnitsAsync() {
            return base.Channel.GetAllBusinessUnitsAsync();
        }
        
        public bool AddUser(Client.FleetServiceReference.User user) {
            return base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserAsync(Client.FleetServiceReference.User user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public bool DeleteUser(Client.FleetServiceReference.User user) {
            return base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(Client.FleetServiceReference.User user) {
            return base.Channel.DeleteUserAsync(user);
        }
        
        public bool ChangeUser(Client.FleetServiceReference.User oldUser, Client.FleetServiceReference.User newUser) {
            return base.Channel.ChangeUser(oldUser, newUser);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUserAsync(Client.FleetServiceReference.User oldUser, Client.FleetServiceReference.User newUser) {
            return base.Channel.ChangeUserAsync(oldUser, newUser);
        }
        
        public bool AddBusinessUnit(Client.FleetServiceReference.BusinessUnit businessUnit) {
            return base.Channel.AddBusinessUnit(businessUnit);
        }
        
        public System.Threading.Tasks.Task<bool> AddBusinessUnitAsync(Client.FleetServiceReference.BusinessUnit businessUnit) {
            return base.Channel.AddBusinessUnitAsync(businessUnit);
        }
        
        public bool DeleteBusinessUnit(Client.FleetServiceReference.BusinessUnit businessUnit) {
            return base.Channel.DeleteBusinessUnit(businessUnit);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBusinessUnitAsync(Client.FleetServiceReference.BusinessUnit businessUnit) {
            return base.Channel.DeleteBusinessUnitAsync(businessUnit);
        }
        
        public bool ChangeBusinessUnit(Client.FleetServiceReference.BusinessUnit oldBusinessUnit, Client.FleetServiceReference.BusinessUnit newBusinessUnit) {
            return base.Channel.ChangeBusinessUnit(oldBusinessUnit, newBusinessUnit);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeBusinessUnitAsync(Client.FleetServiceReference.BusinessUnit oldBusinessUnit, Client.FleetServiceReference.BusinessUnit newBusinessUnit) {
            return base.Channel.ChangeBusinessUnitAsync(oldBusinessUnit, newBusinessUnit);
        }
        
        public Client.FleetServiceReference.Employee[] GetAllEmployees() {
            return base.Channel.GetAllEmployees();
        }
        
        public System.Threading.Tasks.Task<Client.FleetServiceReference.Employee[]> GetAllEmployeesAsync() {
            return base.Channel.GetAllEmployeesAsync();
        }
        
        public bool AddEmployee(Client.FleetServiceReference.Employee employee) {
            return base.Channel.AddEmployee(employee);
        }
        
        public System.Threading.Tasks.Task<bool> AddEmployeeAsync(Client.FleetServiceReference.Employee employee) {
            return base.Channel.AddEmployeeAsync(employee);
        }
        
        public bool DeleteEmployee(Client.FleetServiceReference.Employee employee) {
            return base.Channel.DeleteEmployee(employee);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEmployeeAsync(Client.FleetServiceReference.Employee employee) {
            return base.Channel.DeleteEmployeeAsync(employee);
        }
        
        public bool ChangeEmployee(Client.FleetServiceReference.Employee oldEmployee, Client.FleetServiceReference.Employee newEmployee) {
            return base.Channel.ChangeEmployee(oldEmployee, newEmployee);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeEmployeeAsync(Client.FleetServiceReference.Employee oldEmployee, Client.FleetServiceReference.Employee newEmployee) {
            return base.Channel.ChangeEmployeeAsync(oldEmployee, newEmployee);
        }
        
        public bool CanRemoveEmployee(Client.FleetServiceReference.Employee employee) {
            return base.Channel.CanRemoveEmployee(employee);
        }
        
        public System.Threading.Tasks.Task<bool> CanRemoveEmployeeAsync(Client.FleetServiceReference.Employee employee) {
            return base.Channel.CanRemoveEmployeeAsync(employee);
        }
        
        public Client.FleetServiceReference.Employee GetEmployeeById(int id) {
            return base.Channel.GetEmployeeById(id);
        }
        
        public System.Threading.Tasks.Task<Client.FleetServiceReference.Employee> GetEmployeeByIdAsync(int id) {
            return base.Channel.GetEmployeeByIdAsync(id);
        }
        
        public Client.FleetServiceReference.Vehicle[] GetAllVehicles() {
            return base.Channel.GetAllVehicles();
        }
        
        public System.Threading.Tasks.Task<Client.FleetServiceReference.Vehicle[]> GetAllVehiclesAsync() {
            return base.Channel.GetAllVehiclesAsync();
        }
        
        public bool AddVehicle(Client.FleetServiceReference.Vehicle vehicle) {
            return base.Channel.AddVehicle(vehicle);
        }
        
        public System.Threading.Tasks.Task<bool> AddVehicleAsync(Client.FleetServiceReference.Vehicle vehicle) {
            return base.Channel.AddVehicleAsync(vehicle);
        }
        
        public bool DeleteVehicle(Client.FleetServiceReference.Vehicle vehicle) {
            return base.Channel.DeleteVehicle(vehicle);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteVehicleAsync(Client.FleetServiceReference.Vehicle vehicle) {
            return base.Channel.DeleteVehicleAsync(vehicle);
        }
        
        public bool ChangeVehicle(Client.FleetServiceReference.Vehicle oldVehicle, Client.FleetServiceReference.Vehicle newVehicle) {
            return base.Channel.ChangeVehicle(oldVehicle, newVehicle);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeVehicleAsync(Client.FleetServiceReference.Vehicle oldVehicle, Client.FleetServiceReference.Vehicle newVehicle) {
            return base.Channel.ChangeVehicleAsync(oldVehicle, newVehicle);
        }
        
        public Client.FleetServiceReference.VehicleToEmployeeRelation[] GetRelationFromVehicle(Client.FleetServiceReference.Vehicle vehicle) {
            return base.Channel.GetRelationFromVehicle(vehicle);
        }
        
        public System.Threading.Tasks.Task<Client.FleetServiceReference.VehicleToEmployeeRelation[]> GetRelationFromVehicleAsync(Client.FleetServiceReference.Vehicle vehicle) {
            return base.Channel.GetRelationFromVehicleAsync(vehicle);
        }
        
        public bool AddVehicleToEmployeeRelation(Client.FleetServiceReference.VehicleToEmployeeRelation relation) {
            return base.Channel.AddVehicleToEmployeeRelation(relation);
        }
        
        public System.Threading.Tasks.Task<bool> AddVehicleToEmployeeRelationAsync(Client.FleetServiceReference.VehicleToEmployeeRelation relation) {
            return base.Channel.AddVehicleToEmployeeRelationAsync(relation);
        }
        
        public bool DeleteVehicleToEmployeeRelation(Client.FleetServiceReference.VehicleToEmployeeRelation relation) {
            return base.Channel.DeleteVehicleToEmployeeRelation(relation);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteVehicleToEmployeeRelationAsync(Client.FleetServiceReference.VehicleToEmployeeRelation relation) {
            return base.Channel.DeleteVehicleToEmployeeRelationAsync(relation);
        }
        
        public Client.FleetServiceReference.VehicleToEmployeeRelation[] GetAllRelations() {
            return base.Channel.GetAllRelations();
        }
        
        public System.Threading.Tasks.Task<Client.FleetServiceReference.VehicleToEmployeeRelation[]> GetAllRelationsAsync() {
            return base.Channel.GetAllRelationsAsync();
        }
    }
}
