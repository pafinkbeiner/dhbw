//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.FleetServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FleetServiceReference.IFleetService")]
    public interface IFleetService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/CanUserLogin", ReplyAction="http://tempuri.org/IFleetService/CanUserLoginResponse")]
        Server.Models.User CanUserLogin(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/CanUserLogin", ReplyAction="http://tempuri.org/IFleetService/CanUserLoginResponse")]
        System.Threading.Tasks.Task<Server.Models.User> CanUserLoginAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangePassword", ReplyAction="http://tempuri.org/IFleetService/ChangePasswordResponse")]
        bool ChangePassword(string username, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangePassword", ReplyAction="http://tempuri.org/IFleetService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(string username, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/getAllUsers", ReplyAction="http://tempuri.org/IFleetService/getAllUsersResponse")]
        Server.Models.User[] getAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/getAllUsers", ReplyAction="http://tempuri.org/IFleetService/getAllUsersResponse")]
        System.Threading.Tasks.Task<Server.Models.User[]> getAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetAllBusinessUnits", ReplyAction="http://tempuri.org/IFleetService/GetAllBusinessUnitsResponse")]
        Server.Models.BusinessUnit[] GetAllBusinessUnits();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetAllBusinessUnits", ReplyAction="http://tempuri.org/IFleetService/GetAllBusinessUnitsResponse")]
        System.Threading.Tasks.Task<Server.Models.BusinessUnit[]> GetAllBusinessUnitsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddUser", ReplyAction="http://tempuri.org/IFleetService/AddUserResponse")]
        bool AddUser(Server.Models.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddUser", ReplyAction="http://tempuri.org/IFleetService/AddUserResponse")]
        System.Threading.Tasks.Task<bool> AddUserAsync(Server.Models.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteUser", ReplyAction="http://tempuri.org/IFleetService/DeleteUserResponse")]
        bool DeleteUser(Server.Models.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteUser", ReplyAction="http://tempuri.org/IFleetService/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(Server.Models.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangeUser", ReplyAction="http://tempuri.org/IFleetService/ChangeUserResponse")]
        bool ChangeUser(Server.Models.User oldUser, Server.Models.User newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangeUser", ReplyAction="http://tempuri.org/IFleetService/ChangeUserResponse")]
        System.Threading.Tasks.Task<bool> ChangeUserAsync(Server.Models.User oldUser, Server.Models.User newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddBusinessUnit", ReplyAction="http://tempuri.org/IFleetService/AddBusinessUnitResponse")]
        bool AddBusinessUnit(Server.Models.BusinessUnit businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddBusinessUnit", ReplyAction="http://tempuri.org/IFleetService/AddBusinessUnitResponse")]
        System.Threading.Tasks.Task<bool> AddBusinessUnitAsync(Server.Models.BusinessUnit businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteBusinessUnit", ReplyAction="http://tempuri.org/IFleetService/DeleteBusinessUnitResponse")]
        bool DeleteBusinessUnit(Server.Models.BusinessUnit businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteBusinessUnit", ReplyAction="http://tempuri.org/IFleetService/DeleteBusinessUnitResponse")]
        System.Threading.Tasks.Task<bool> DeleteBusinessUnitAsync(Server.Models.BusinessUnit businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangeBusinessUnit", ReplyAction="http://tempuri.org/IFleetService/ChangeBusinessUnitResponse")]
        bool ChangeBusinessUnit(Server.Models.BusinessUnit oldBusinessUnit, Server.Models.BusinessUnit newBusinessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangeBusinessUnit", ReplyAction="http://tempuri.org/IFleetService/ChangeBusinessUnitResponse")]
        System.Threading.Tasks.Task<bool> ChangeBusinessUnitAsync(Server.Models.BusinessUnit oldBusinessUnit, Server.Models.BusinessUnit newBusinessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetAllEmployees", ReplyAction="http://tempuri.org/IFleetService/GetAllEmployeesResponse")]
        Server.Models.Employee[] GetAllEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetAllEmployees", ReplyAction="http://tempuri.org/IFleetService/GetAllEmployeesResponse")]
        System.Threading.Tasks.Task<Server.Models.Employee[]> GetAllEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddEmployee", ReplyAction="http://tempuri.org/IFleetService/AddEmployeeResponse")]
        bool AddEmployee(Server.Models.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddEmployee", ReplyAction="http://tempuri.org/IFleetService/AddEmployeeResponse")]
        System.Threading.Tasks.Task<bool> AddEmployeeAsync(Server.Models.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteEmployee", ReplyAction="http://tempuri.org/IFleetService/DeleteEmployeeResponse")]
        bool DeleteEmployee(Server.Models.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteEmployee", ReplyAction="http://tempuri.org/IFleetService/DeleteEmployeeResponse")]
        System.Threading.Tasks.Task<bool> DeleteEmployeeAsync(Server.Models.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangeEmployee", ReplyAction="http://tempuri.org/IFleetService/ChangeEmployeeResponse")]
        bool ChangeEmployee(Server.Models.Employee oldEmployee, Server.Models.Employee newEmployee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangeEmployee", ReplyAction="http://tempuri.org/IFleetService/ChangeEmployeeResponse")]
        System.Threading.Tasks.Task<bool> ChangeEmployeeAsync(Server.Models.Employee oldEmployee, Server.Models.Employee newEmployee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/CanRemoveEmployee", ReplyAction="http://tempuri.org/IFleetService/CanRemoveEmployeeResponse")]
        bool CanRemoveEmployee(Server.Models.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/CanRemoveEmployee", ReplyAction="http://tempuri.org/IFleetService/CanRemoveEmployeeResponse")]
        System.Threading.Tasks.Task<bool> CanRemoveEmployeeAsync(Server.Models.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetEmployeeById", ReplyAction="http://tempuri.org/IFleetService/GetEmployeeByIdResponse")]
        Server.Models.Employee GetEmployeeById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetEmployeeById", ReplyAction="http://tempuri.org/IFleetService/GetEmployeeByIdResponse")]
        System.Threading.Tasks.Task<Server.Models.Employee> GetEmployeeByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetAllVehicles", ReplyAction="http://tempuri.org/IFleetService/GetAllVehiclesResponse")]
        Server.Models.Vehicle[] GetAllVehicles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetAllVehicles", ReplyAction="http://tempuri.org/IFleetService/GetAllVehiclesResponse")]
        System.Threading.Tasks.Task<Server.Models.Vehicle[]> GetAllVehiclesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddVehicle", ReplyAction="http://tempuri.org/IFleetService/AddVehicleResponse")]
        bool AddVehicle(Server.Models.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddVehicle", ReplyAction="http://tempuri.org/IFleetService/AddVehicleResponse")]
        System.Threading.Tasks.Task<bool> AddVehicleAsync(Server.Models.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteVehicle", ReplyAction="http://tempuri.org/IFleetService/DeleteVehicleResponse")]
        bool DeleteVehicle(Server.Models.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteVehicle", ReplyAction="http://tempuri.org/IFleetService/DeleteVehicleResponse")]
        System.Threading.Tasks.Task<bool> DeleteVehicleAsync(Server.Models.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangeVehicle", ReplyAction="http://tempuri.org/IFleetService/ChangeVehicleResponse")]
        bool ChangeVehicle(Server.Models.Vehicle oldVehicle, Server.Models.Vehicle newVehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/ChangeVehicle", ReplyAction="http://tempuri.org/IFleetService/ChangeVehicleResponse")]
        System.Threading.Tasks.Task<bool> ChangeVehicleAsync(Server.Models.Vehicle oldVehicle, Server.Models.Vehicle newVehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetRelationFromVehicle", ReplyAction="http://tempuri.org/IFleetService/GetRelationFromVehicleResponse")]
        Server.Models.VehicleToEmployeeRelation[] GetRelationFromVehicle(Server.Models.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetRelationFromVehicle", ReplyAction="http://tempuri.org/IFleetService/GetRelationFromVehicleResponse")]
        System.Threading.Tasks.Task<Server.Models.VehicleToEmployeeRelation[]> GetRelationFromVehicleAsync(Server.Models.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddVehicleToEmployeeRelation", ReplyAction="http://tempuri.org/IFleetService/AddVehicleToEmployeeRelationResponse")]
        bool AddVehicleToEmployeeRelation(Server.Models.VehicleToEmployeeRelation relation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/AddVehicleToEmployeeRelation", ReplyAction="http://tempuri.org/IFleetService/AddVehicleToEmployeeRelationResponse")]
        System.Threading.Tasks.Task<bool> AddVehicleToEmployeeRelationAsync(Server.Models.VehicleToEmployeeRelation relation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteVehicleToEmployeeRelation", ReplyAction="http://tempuri.org/IFleetService/DeleteVehicleToEmployeeRelationResponse")]
        bool DeleteVehicleToEmployeeRelation(Server.Models.VehicleToEmployeeRelation relation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/DeleteVehicleToEmployeeRelation", ReplyAction="http://tempuri.org/IFleetService/DeleteVehicleToEmployeeRelationResponse")]
        System.Threading.Tasks.Task<bool> DeleteVehicleToEmployeeRelationAsync(Server.Models.VehicleToEmployeeRelation relation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetAllRelations", ReplyAction="http://tempuri.org/IFleetService/GetAllRelationsResponse")]
        Server.Models.VehicleToEmployeeRelation[] GetAllRelations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetService/GetAllRelations", ReplyAction="http://tempuri.org/IFleetService/GetAllRelationsResponse")]
        System.Threading.Tasks.Task<Server.Models.VehicleToEmployeeRelation[]> GetAllRelationsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFleetServiceChannel : Test.FleetServiceReference.IFleetService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FleetServiceClient : System.ServiceModel.ClientBase<Test.FleetServiceReference.IFleetService>, Test.FleetServiceReference.IFleetService {
        
        public FleetServiceClient() {
        }
        
        public FleetServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FleetServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FleetServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FleetServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Server.Models.User CanUserLogin(string userName, string password) {
            return base.Channel.CanUserLogin(userName, password);
        }
        
        public System.Threading.Tasks.Task<Server.Models.User> CanUserLoginAsync(string userName, string password) {
            return base.Channel.CanUserLoginAsync(userName, password);
        }
        
        public bool ChangePassword(string username, string oldPassword, string newPassword) {
            return base.Channel.ChangePassword(username, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(string username, string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordAsync(username, oldPassword, newPassword);
        }
        
        public Server.Models.User[] getAllUsers() {
            return base.Channel.getAllUsers();
        }
        
        public System.Threading.Tasks.Task<Server.Models.User[]> getAllUsersAsync() {
            return base.Channel.getAllUsersAsync();
        }
        
        public Server.Models.BusinessUnit[] GetAllBusinessUnits() {
            return base.Channel.GetAllBusinessUnits();
        }
        
        public System.Threading.Tasks.Task<Server.Models.BusinessUnit[]> GetAllBusinessUnitsAsync() {
            return base.Channel.GetAllBusinessUnitsAsync();
        }
        
        public bool AddUser(Server.Models.User user) {
            return base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserAsync(Server.Models.User user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public bool DeleteUser(Server.Models.User user) {
            return base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(Server.Models.User user) {
            return base.Channel.DeleteUserAsync(user);
        }
        
        public bool ChangeUser(Server.Models.User oldUser, Server.Models.User newUser) {
            return base.Channel.ChangeUser(oldUser, newUser);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUserAsync(Server.Models.User oldUser, Server.Models.User newUser) {
            return base.Channel.ChangeUserAsync(oldUser, newUser);
        }
        
        public bool AddBusinessUnit(Server.Models.BusinessUnit businessUnit) {
            return base.Channel.AddBusinessUnit(businessUnit);
        }
        
        public System.Threading.Tasks.Task<bool> AddBusinessUnitAsync(Server.Models.BusinessUnit businessUnit) {
            return base.Channel.AddBusinessUnitAsync(businessUnit);
        }
        
        public bool DeleteBusinessUnit(Server.Models.BusinessUnit businessUnit) {
            return base.Channel.DeleteBusinessUnit(businessUnit);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBusinessUnitAsync(Server.Models.BusinessUnit businessUnit) {
            return base.Channel.DeleteBusinessUnitAsync(businessUnit);
        }
        
        public bool ChangeBusinessUnit(Server.Models.BusinessUnit oldBusinessUnit, Server.Models.BusinessUnit newBusinessUnit) {
            return base.Channel.ChangeBusinessUnit(oldBusinessUnit, newBusinessUnit);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeBusinessUnitAsync(Server.Models.BusinessUnit oldBusinessUnit, Server.Models.BusinessUnit newBusinessUnit) {
            return base.Channel.ChangeBusinessUnitAsync(oldBusinessUnit, newBusinessUnit);
        }
        
        public Server.Models.Employee[] GetAllEmployees() {
            return base.Channel.GetAllEmployees();
        }
        
        public System.Threading.Tasks.Task<Server.Models.Employee[]> GetAllEmployeesAsync() {
            return base.Channel.GetAllEmployeesAsync();
        }
        
        public bool AddEmployee(Server.Models.Employee employee) {
            return base.Channel.AddEmployee(employee);
        }
        
        public System.Threading.Tasks.Task<bool> AddEmployeeAsync(Server.Models.Employee employee) {
            return base.Channel.AddEmployeeAsync(employee);
        }
        
        public bool DeleteEmployee(Server.Models.Employee employee) {
            return base.Channel.DeleteEmployee(employee);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEmployeeAsync(Server.Models.Employee employee) {
            return base.Channel.DeleteEmployeeAsync(employee);
        }
        
        public bool ChangeEmployee(Server.Models.Employee oldEmployee, Server.Models.Employee newEmployee) {
            return base.Channel.ChangeEmployee(oldEmployee, newEmployee);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeEmployeeAsync(Server.Models.Employee oldEmployee, Server.Models.Employee newEmployee) {
            return base.Channel.ChangeEmployeeAsync(oldEmployee, newEmployee);
        }
        
        public bool CanRemoveEmployee(Server.Models.Employee employee) {
            return base.Channel.CanRemoveEmployee(employee);
        }
        
        public System.Threading.Tasks.Task<bool> CanRemoveEmployeeAsync(Server.Models.Employee employee) {
            return base.Channel.CanRemoveEmployeeAsync(employee);
        }
        
        public Server.Models.Employee GetEmployeeById(int id) {
            return base.Channel.GetEmployeeById(id);
        }
        
        public System.Threading.Tasks.Task<Server.Models.Employee> GetEmployeeByIdAsync(int id) {
            return base.Channel.GetEmployeeByIdAsync(id);
        }
        
        public Server.Models.Vehicle[] GetAllVehicles() {
            return base.Channel.GetAllVehicles();
        }
        
        public System.Threading.Tasks.Task<Server.Models.Vehicle[]> GetAllVehiclesAsync() {
            return base.Channel.GetAllVehiclesAsync();
        }
        
        public bool AddVehicle(Server.Models.Vehicle vehicle) {
            return base.Channel.AddVehicle(vehicle);
        }
        
        public System.Threading.Tasks.Task<bool> AddVehicleAsync(Server.Models.Vehicle vehicle) {
            return base.Channel.AddVehicleAsync(vehicle);
        }
        
        public bool DeleteVehicle(Server.Models.Vehicle vehicle) {
            return base.Channel.DeleteVehicle(vehicle);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteVehicleAsync(Server.Models.Vehicle vehicle) {
            return base.Channel.DeleteVehicleAsync(vehicle);
        }
        
        public bool ChangeVehicle(Server.Models.Vehicle oldVehicle, Server.Models.Vehicle newVehicle) {
            return base.Channel.ChangeVehicle(oldVehicle, newVehicle);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeVehicleAsync(Server.Models.Vehicle oldVehicle, Server.Models.Vehicle newVehicle) {
            return base.Channel.ChangeVehicleAsync(oldVehicle, newVehicle);
        }
        
        public Server.Models.VehicleToEmployeeRelation[] GetRelationFromVehicle(Server.Models.Vehicle vehicle) {
            return base.Channel.GetRelationFromVehicle(vehicle);
        }
        
        public System.Threading.Tasks.Task<Server.Models.VehicleToEmployeeRelation[]> GetRelationFromVehicleAsync(Server.Models.Vehicle vehicle) {
            return base.Channel.GetRelationFromVehicleAsync(vehicle);
        }
        
        public bool AddVehicleToEmployeeRelation(Server.Models.VehicleToEmployeeRelation relation) {
            return base.Channel.AddVehicleToEmployeeRelation(relation);
        }
        
        public System.Threading.Tasks.Task<bool> AddVehicleToEmployeeRelationAsync(Server.Models.VehicleToEmployeeRelation relation) {
            return base.Channel.AddVehicleToEmployeeRelationAsync(relation);
        }
        
        public bool DeleteVehicleToEmployeeRelation(Server.Models.VehicleToEmployeeRelation relation) {
            return base.Channel.DeleteVehicleToEmployeeRelation(relation);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteVehicleToEmployeeRelationAsync(Server.Models.VehicleToEmployeeRelation relation) {
            return base.Channel.DeleteVehicleToEmployeeRelationAsync(relation);
        }
        
        public Server.Models.VehicleToEmployeeRelation[] GetAllRelations() {
            return base.Channel.GetAllRelations();
        }
        
        public System.Threading.Tasks.Task<Server.Models.VehicleToEmployeeRelation[]> GetAllRelationsAsync() {
            return base.Channel.GetAllRelationsAsync();
        }
    }
}
